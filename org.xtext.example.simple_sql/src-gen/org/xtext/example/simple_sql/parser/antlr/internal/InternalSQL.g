/*
 * generated by Xtext 2.33.0
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.example.simple_sql.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.example.simple_sql.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.example.simple_sql.services.SQLGrammarAccess;

}

@parser::members {

 	private SQLGrammarAccess grammarAccess;

    public InternalSQLParser(TokenStream input, SQLGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SQLGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0());
			}
			lv_statements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"statements",
					lv_statements_0_0,
					"org.xtext.example.simple_sql.SQL.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getCreateTableStatementParserRuleCall_0());
		}
		this_CreateTableStatement_0=ruleCreateTableStatement
		{
			$current = $this_CreateTableStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_1());
		}
		this_SelectStatement_1=ruleSelectStatement
		{
			$current = $this_SelectStatement_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleCreateTableStatement
entryRuleCreateTableStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCreateTableStatementRule()); }
	iv_ruleCreateTableStatement=ruleCreateTableStatement
	{ $current=$iv_ruleCreateTableStatement.current; }
	EOF;

// Rule CreateTableStatement
ruleCreateTableStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='CREATE'
		{
			newLeafNode(otherlv_0, grammarAccess.getCreateTableStatementAccess().getCREATEKeyword_0());
		}
		otherlv_1='TABLE'
		{
			newLeafNode(otherlv_1, grammarAccess.getCreateTableStatementAccess().getTABLEKeyword_1());
		}
		(
			(
				lv_tableName_2_0=RULE_STRING
				{
					newLeafNode(lv_tableName_2_0, grammarAccess.getCreateTableStatementAccess().getTableNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getCreateTableStatementRule());
					}
					setWithLastConsumed(
						$current,
						"tableName",
						lv_tableName_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_3='('
		{
			newLeafNode(otherlv_3, grammarAccess.getCreateTableStatementAccess().getLeftParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCreateTableStatementAccess().getColumnsColumnDefinitionParserRuleCall_4_0());
				}
				lv_columns_4_0=ruleColumnDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCreateTableStatementRule());
					}
					add(
						$current,
						"columns",
						lv_columns_4_0,
						"org.xtext.example.simple_sql.SQL.ColumnDefinition");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getCreateTableStatementAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleColumnDefinition
entryRuleColumnDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnDefinitionRule()); }
	iv_ruleColumnDefinition=ruleColumnDefinition
	{ $current=$iv_ruleColumnDefinition.current; }
	EOF;

// Rule ColumnDefinition
ruleColumnDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_columnName_0_0=RULE_ID
				{
					newLeafNode(lv_columnName_0_0, grammarAccess.getColumnDefinitionAccess().getColumnNameIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getColumnDefinitionRule());
					}
					setWithLastConsumed(
						$current,
						"columnName",
						lv_columnName_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getColumnTypeColumnTypeParserRuleCall_1_0());
				}
				lv_columnType_1_0=ruleColumnType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
					}
					set(
						$current,
						"columnType",
						lv_columnType_1_0,
						"org.xtext.example.simple_sql.SQL.ColumnType");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getColumnDefinitionAccess().getConstraintsConstraintParserRuleCall_2_0());
				}
				lv_constraints_2_0=ruleConstraint
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getColumnDefinitionRule());
					}
					add(
						$current,
						"constraints",
						lv_constraints_2_0,
						"org.xtext.example.simple_sql.SQL.Constraint");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			otherlv_3=','
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnDefinitionAccess().getCommaKeyword_3());
			}
		)?
	)
;

// Entry rule entryRuleColumnType
entryRuleColumnType returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getColumnTypeRule()); }
	iv_ruleColumnType=ruleColumnType
	{ $current=$iv_ruleColumnType.current; }
	EOF;

// Rule ColumnType
ruleColumnType returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColumnTypeAccess().getColumnTypeAction_0_0(),
						$current);
				}
			)
			otherlv_1='INT'
			{
				newLeafNode(otherlv_1, grammarAccess.getColumnTypeAccess().getINTKeyword_0_1());
			}
		)
		    |
		(
			otherlv_2='VARCHAR'
			{
				newLeafNode(otherlv_2, grammarAccess.getColumnTypeAccess().getVARCHARKeyword_1_0());
			}
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getColumnTypeAccess().getLeftParenthesisKeyword_1_1());
			}
			(
				(
					lv_length_4_0=RULE_INT
					{
						newLeafNode(lv_length_4_0, grammarAccess.getColumnTypeAccess().getLengthINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getColumnTypeRule());
						}
						setWithLastConsumed(
							$current,
							"length",
							lv_length_4_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getColumnTypeAccess().getRightParenthesisKeyword_1_3());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColumnTypeAccess().getColumnTypeAction_2_0(),
						$current);
				}
			)
			otherlv_7='BOOLEAN'
			{
				newLeafNode(otherlv_7, grammarAccess.getColumnTypeAccess().getBOOLEANKeyword_2_1());
			}
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getColumnTypeAccess().getColumnTypeAction_3_0(),
						$current);
				}
			)
			otherlv_9='TINYINT'
			{
				newLeafNode(otherlv_9, grammarAccess.getColumnTypeAccess().getTINYINTKeyword_3_1());
			}
		)
	)
;

// Entry rule entryRuleConstraint
entryRuleConstraint returns [String current=null]:
	{ newCompositeNode(grammarAccess.getConstraintRule()); }
	iv_ruleConstraint=ruleConstraint
	{ $current=$iv_ruleConstraint.current.getText(); }
	EOF;

// Rule Constraint
ruleConstraint returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='NOT'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstraintAccess().getNOTKeyword_0_0());
			}
			kw='NULL'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstraintAccess().getNULLKeyword_0_1());
			}
		)
		    |
		(
			kw='PRIMARY'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstraintAccess().getPRIMARYKeyword_1_0());
			}
			kw='KEY'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getConstraintAccess().getKEYKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectStatementRule()); }
	iv_ruleSelectStatement=ruleSelectStatement
	{ $current=$iv_ruleSelectStatement.current; }
	EOF;

// Rule SelectStatement
ruleSelectStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='SELECT'
		{
			newLeafNode(otherlv_0, grammarAccess.getSelectStatementAccess().getSELECTKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0());
				}
				lv_selectedColumns_1_0=ruleSelectedColumns
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"selectedColumns",
						lv_selectedColumns_1_0,
						"org.xtext.example.simple_sql.SQL.SelectedColumns");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='FROM'
		{
			newLeafNode(otherlv_2, grammarAccess.getSelectStatementAccess().getFROMKeyword_2());
		}
		(
			(
				lv_tableName_3_0=RULE_STRING
				{
					newLeafNode(lv_tableName_3_0, grammarAccess.getSelectStatementAccess().getTableNameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectStatementRule());
					}
					setWithLastConsumed(
						$current,
						"tableName",
						lv_tableName_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0());
				}
				lv_whereClause_4_0=ruleWhereClause
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelectStatementRule());
					}
					set(
						$current,
						"whereClause",
						lv_whereClause_4_0,
						"org.xtext.example.simple_sql.SQL.WhereClause");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleSelectedColumns
entryRuleSelectedColumns returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelectedColumnsRule()); }
	iv_ruleSelectedColumns=ruleSelectedColumns
	{ $current=$iv_ruleSelectedColumns.current; }
	EOF;

// Rule SelectedColumns
ruleSelectedColumns returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_columns_0_0=RULE_ID
				{
					newLeafNode(lv_columns_0_0, grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSelectedColumnsRule());
					}
					addWithLastConsumed(
						$current,
						"columns",
						lv_columns_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_columns_2_0=RULE_ID
					{
						newLeafNode(lv_columns_2_0, grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getSelectedColumnsRule());
						}
						addWithLastConsumed(
							$current,
							"columns",
							lv_columns_2_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleWhereClause
entryRuleWhereClause returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhereClauseRule()); }
	iv_ruleWhereClause=ruleWhereClause
	{ $current=$iv_ruleWhereClause.current; }
	EOF;

// Rule WhereClause
ruleWhereClause returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='WHERE'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhereClauseAccess().getWHEREKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhereClauseRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"org.xtext.example.simple_sql.SQL.Expression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0());
		}
		this_AndExpression_0=ruleAndExpression
		{
			$current = $this_AndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getExpressionAccess().getOrExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='OR'
			{
				newLeafNode(otherlv_2, grammarAccess.getExpressionAccess().getORKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.simple_sql.SQL.AndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleAndExpression
entryRuleAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAndExpressionRule()); }
	iv_ruleAndExpression=ruleAndExpression
	{ $current=$iv_ruleAndExpression.current; }
	EOF;

// Rule AndExpression
ruleAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0());
		}
		this_Comparison_0=ruleComparison
		{
			$current = $this_Comparison_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0(),
						$current);
				}
			)
			otherlv_2='AND'
			{
				newLeafNode(otherlv_2, grammarAccess.getAndExpressionAccess().getANDKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleComparison
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAndExpressionRule());
						}
						set(
							$current,
							"right",
							lv_right_3_0,
							"org.xtext.example.simple_sql.SQL.Comparison");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleComparison
entryRuleComparison returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparisonRule()); }
	iv_ruleComparison=ruleComparison
	{ $current=$iv_ruleComparison.current; }
	EOF;

// Rule Comparison
ruleComparison returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_column_0_0=RULE_ID
				{
					newLeafNode(lv_column_0_0, grammarAccess.getComparisonAccess().getColumnIDTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getComparisonRule());
					}
					setWithLastConsumed(
						$current,
						"column",
						lv_column_0_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getOperatorOperatorParserRuleCall_1_0());
				}
				lv_operator_1_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.xtext.example.simple_sql.SQL.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getComparisonAccess().getValueValueParserRuleCall_2_0());
				}
				lv_value_2_0=ruleValue
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getComparisonRule());
					}
					set(
						$current,
						"value",
						lv_value_2_0,
						"org.xtext.example.simple_sql.SQL.Value");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getEqualsSignKeyword_0());
		}
		    |
		kw='<>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1());
		}
		    |
		kw='<'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignKeyword_2());
		}
		    |
		kw='<='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3());
		}
		    |
		kw='>'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4());
		}
		    |
		kw='>='
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5());
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current; }
	EOF;

// Rule Value
ruleValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0());
		}
		this_BooleanValue_0=ruleBooleanValue
		{
			$current = $this_BooleanValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1());
		}
		this_NumberValue_1=ruleNumberValue
		{
			$current = $this_NumberValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getValueAccess().getStringValueParserRuleCall_2());
		}
		this_StringValue_2=ruleStringValue
		{
			$current = $this_StringValue_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_value_0_1='true'
				{
					newLeafNode(lv_value_0_1, grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_1, null);
				}
				    |
				lv_value_0_2='false'
				{
					newLeafNode(lv_value_0_2, grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanValueRule());
					}
					setWithLastConsumed($current, "value", lv_value_0_2, null);
				}
			)
		)
	)
;

// Entry rule entryRuleNumberValue
entryRuleNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNumberValueRule()); }
	iv_ruleNumberValue=ruleNumberValue
	{ $current=$iv_ruleNumberValue.current; }
	EOF;

// Rule NumberValue
ruleNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_INT
			{
				newLeafNode(lv_value_0_0, grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getNumberValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleStringValue
entryRuleStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStringValueRule()); }
	iv_ruleStringValue=ruleStringValue
	{ $current=$iv_ruleStringValue.current; }
	EOF;

// Rule StringValue
ruleStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
