/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.simple_sql.sQL.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EDataTypeEList;

import org.xtext.example.simple_sql.sQL.ColumnDefinition;
import org.xtext.example.simple_sql.sQL.ColumnType;
import org.xtext.example.simple_sql.sQL.SQLPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Column Definition</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.simple_sql.sQL.impl.ColumnDefinitionImpl#getColumnName <em>Column Name</em>}</li>
 *   <li>{@link org.xtext.example.simple_sql.sQL.impl.ColumnDefinitionImpl#getColumnType <em>Column Type</em>}</li>
 *   <li>{@link org.xtext.example.simple_sql.sQL.impl.ColumnDefinitionImpl#getConstraints <em>Constraints</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ColumnDefinitionImpl extends MinimalEObjectImpl.Container implements ColumnDefinition
{
  /**
   * The default value of the '{@link #getColumnName() <em>Column Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnName()
   * @generated
   * @ordered
   */
  protected static final String COLUMN_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getColumnName() <em>Column Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnName()
   * @generated
   * @ordered
   */
  protected String columnName = COLUMN_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getColumnType() <em>Column Type</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getColumnType()
   * @generated
   * @ordered
   */
  protected ColumnType columnType;

  /**
   * The cached value of the '{@link #getConstraints() <em>Constraints</em>}' attribute list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConstraints()
   * @generated
   * @ordered
   */
  protected EList<String> constraints;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ColumnDefinitionImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SQLPackage.Literals.COLUMN_DEFINITION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getColumnName()
  {
    return columnName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumnName(String newColumnName)
  {
    String oldColumnName = columnName;
    columnName = newColumnName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.COLUMN_DEFINITION__COLUMN_NAME, oldColumnName, columnName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ColumnType getColumnType()
  {
    return columnType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetColumnType(ColumnType newColumnType, NotificationChain msgs)
  {
    ColumnType oldColumnType = columnType;
    columnType = newColumnType;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE, oldColumnType, newColumnType);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setColumnType(ColumnType newColumnType)
  {
    if (newColumnType != columnType)
    {
      NotificationChain msgs = null;
      if (columnType != null)
        msgs = ((InternalEObject)columnType).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE, null, msgs);
      if (newColumnType != null)
        msgs = ((InternalEObject)newColumnType).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE, null, msgs);
      msgs = basicSetColumnType(newColumnType, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE, newColumnType, newColumnType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<String> getConstraints()
  {
    if (constraints == null)
    {
      constraints = new EDataTypeEList<String>(String.class, this, SQLPackage.COLUMN_DEFINITION__CONSTRAINTS);
    }
    return constraints;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE:
        return basicSetColumnType(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SQLPackage.COLUMN_DEFINITION__COLUMN_NAME:
        return getColumnName();
      case SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE:
        return getColumnType();
      case SQLPackage.COLUMN_DEFINITION__CONSTRAINTS:
        return getConstraints();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SQLPackage.COLUMN_DEFINITION__COLUMN_NAME:
        setColumnName((String)newValue);
        return;
      case SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE:
        setColumnType((ColumnType)newValue);
        return;
      case SQLPackage.COLUMN_DEFINITION__CONSTRAINTS:
        getConstraints().clear();
        getConstraints().addAll((Collection<? extends String>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.COLUMN_DEFINITION__COLUMN_NAME:
        setColumnName(COLUMN_NAME_EDEFAULT);
        return;
      case SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE:
        setColumnType((ColumnType)null);
        return;
      case SQLPackage.COLUMN_DEFINITION__CONSTRAINTS:
        getConstraints().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SQLPackage.COLUMN_DEFINITION__COLUMN_NAME:
        return COLUMN_NAME_EDEFAULT == null ? columnName != null : !COLUMN_NAME_EDEFAULT.equals(columnName);
      case SQLPackage.COLUMN_DEFINITION__COLUMN_TYPE:
        return columnType != null;
      case SQLPackage.COLUMN_DEFINITION__CONSTRAINTS:
        return constraints != null && !constraints.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (columnName: ");
    result.append(columnName);
    result.append(", constraints: ");
    result.append(constraints);
    result.append(')');
    return result.toString();
  }

} //ColumnDefinitionImpl
