/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.simple_sql.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SQLGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Model");
		private final Assignment cStatementsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cStatementsStatementParserRuleCall_0 = (RuleCall)cStatementsAssignment.eContents().get(0);
		
		//Model:
		//    statements+=Statement*;
		@Override public ParserRule getRule() { return rule; }
		
		//statements+=Statement*
		public Assignment getStatementsAssignment() { return cStatementsAssignment; }
		
		//Statement
		public RuleCall getStatementsStatementParserRuleCall_0() { return cStatementsStatementParserRuleCall_0; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Statement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cCreateTableStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelectStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Statement:
		//    CreateTableStatement | SelectStatement;
		@Override public ParserRule getRule() { return rule; }
		
		//CreateTableStatement | SelectStatement
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//CreateTableStatement
		public RuleCall getCreateTableStatementParserRuleCall_0() { return cCreateTableStatementParserRuleCall_0; }
		
		//SelectStatement
		public RuleCall getSelectStatementParserRuleCall_1() { return cSelectStatementParserRuleCall_1; }
	}
	public class CreateTableStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.CreateTableStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCREATEKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cTABLEKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTableNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cTableNameSTRINGTerminalRuleCall_2_0 = (RuleCall)cTableNameAssignment_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cColumnsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cColumnsColumnDefinitionParserRuleCall_4_0 = (RuleCall)cColumnsAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CreateTableStatement:
		//    'CREATE' 'TABLE' tableName=STRING '(' columns+=ColumnDefinition* ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'CREATE' 'TABLE' tableName=STRING '(' columns+=ColumnDefinition* ')'
		public Group getGroup() { return cGroup; }
		
		//'CREATE'
		public Keyword getCREATEKeyword_0() { return cCREATEKeyword_0; }
		
		//'TABLE'
		public Keyword getTABLEKeyword_1() { return cTABLEKeyword_1; }
		
		//tableName=STRING
		public Assignment getTableNameAssignment_2() { return cTableNameAssignment_2; }
		
		//STRING
		public RuleCall getTableNameSTRINGTerminalRuleCall_2_0() { return cTableNameSTRINGTerminalRuleCall_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//columns+=ColumnDefinition*
		public Assignment getColumnsAssignment_4() { return cColumnsAssignment_4; }
		
		//ColumnDefinition
		public RuleCall getColumnsColumnDefinitionParserRuleCall_4_0() { return cColumnsColumnDefinitionParserRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
	}
	public class ColumnDefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.ColumnDefinition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnNameIDTerminalRuleCall_0_0 = (RuleCall)cColumnNameAssignment_0.eContents().get(0);
		private final Assignment cColumnTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cColumnTypeColumnTypeParserRuleCall_1_0 = (RuleCall)cColumnTypeAssignment_1.eContents().get(0);
		private final Assignment cConstraintsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConstraintsConstraintParserRuleCall_2_0 = (RuleCall)cConstraintsAssignment_2.eContents().get(0);
		private final Keyword cCommaKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ColumnDefinition:
		//    columnName=ID columnType=ColumnType (constraints+=Constraint)* ','?;
		@Override public ParserRule getRule() { return rule; }
		
		//columnName=ID columnType=ColumnType (constraints+=Constraint)* ','?
		public Group getGroup() { return cGroup; }
		
		//columnName=ID
		public Assignment getColumnNameAssignment_0() { return cColumnNameAssignment_0; }
		
		//ID
		public RuleCall getColumnNameIDTerminalRuleCall_0_0() { return cColumnNameIDTerminalRuleCall_0_0; }
		
		//columnType=ColumnType
		public Assignment getColumnTypeAssignment_1() { return cColumnTypeAssignment_1; }
		
		//ColumnType
		public RuleCall getColumnTypeColumnTypeParserRuleCall_1_0() { return cColumnTypeColumnTypeParserRuleCall_1_0; }
		
		//(constraints+=Constraint)*
		public Assignment getConstraintsAssignment_2() { return cConstraintsAssignment_2; }
		
		//Constraint
		public RuleCall getConstraintsConstraintParserRuleCall_2_0() { return cConstraintsConstraintParserRuleCall_2_0; }
		
		//','?
		public Keyword getCommaKeyword_3() { return cCommaKeyword_3; }
	}
	public class ColumnTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.ColumnType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cColumnTypeAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Keyword cINTKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cVARCHARKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cLengthAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cLengthINTTerminalRuleCall_1_2_0 = (RuleCall)cLengthAssignment_1_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Action cColumnTypeAction_2_0 = (Action)cGroup_2.eContents().get(0);
		private final Keyword cBOOLEANKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Action cColumnTypeAction_3_0 = (Action)cGroup_3.eContents().get(0);
		private final Keyword cTINYINTKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		
		//ColumnType:
		//    {ColumnType} 'INT' | 'VARCHAR' '(' length=INT ')' | {ColumnType} 'BOOLEAN' | {ColumnType} 'TINYINT';
		@Override public ParserRule getRule() { return rule; }
		
		//{ColumnType} 'INT' | 'VARCHAR' '(' length=INT ')' | {ColumnType} 'BOOLEAN' | {ColumnType} 'TINYINT'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{ColumnType} 'INT'
		public Group getGroup_0() { return cGroup_0; }
		
		//{ColumnType}
		public Action getColumnTypeAction_0_0() { return cColumnTypeAction_0_0; }
		
		//'INT'
		public Keyword getINTKeyword_0_1() { return cINTKeyword_0_1; }
		
		//'VARCHAR' '(' length=INT ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'VARCHAR'
		public Keyword getVARCHARKeyword_1_0() { return cVARCHARKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//length=INT
		public Assignment getLengthAssignment_1_2() { return cLengthAssignment_1_2; }
		
		//INT
		public RuleCall getLengthINTTerminalRuleCall_1_2_0() { return cLengthINTTerminalRuleCall_1_2_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
		
		//{ColumnType} 'BOOLEAN'
		public Group getGroup_2() { return cGroup_2; }
		
		//{ColumnType}
		public Action getColumnTypeAction_2_0() { return cColumnTypeAction_2_0; }
		
		//'BOOLEAN'
		public Keyword getBOOLEANKeyword_2_1() { return cBOOLEANKeyword_2_1; }
		
		//{ColumnType} 'TINYINT'
		public Group getGroup_3() { return cGroup_3; }
		
		//{ColumnType}
		public Action getColumnTypeAction_3_0() { return cColumnTypeAction_3_0; }
		
		//'TINYINT'
		public Keyword getTINYINTKeyword_3_1() { return cTINYINTKeyword_3_1; }
	}
	public class ConstraintElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Constraint");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNOTKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cNULLKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cPRIMARYKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cKEYKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		
		//Constraint:
		//    'NOT' 'NULL' | 'PRIMARY' 'KEY';
		@Override public ParserRule getRule() { return rule; }
		
		//'NOT' 'NULL' | 'PRIMARY' 'KEY'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'NOT' 'NULL'
		public Group getGroup_0() { return cGroup_0; }
		
		//'NOT'
		public Keyword getNOTKeyword_0_0() { return cNOTKeyword_0_0; }
		
		//'NULL'
		public Keyword getNULLKeyword_0_1() { return cNULLKeyword_0_1; }
		
		//'PRIMARY' 'KEY'
		public Group getGroup_1() { return cGroup_1; }
		
		//'PRIMARY'
		public Keyword getPRIMARYKeyword_1_0() { return cPRIMARYKeyword_1_0; }
		
		//'KEY'
		public Keyword getKEYKeyword_1_1() { return cKEYKeyword_1_1; }
	}
	public class SelectStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.SelectStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cSelectedColumnsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSelectedColumnsSelectedColumnsParserRuleCall_1_0 = (RuleCall)cSelectedColumnsAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTableNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTableNameSTRINGTerminalRuleCall_3_0 = (RuleCall)cTableNameAssignment_3.eContents().get(0);
		private final Assignment cWhereClauseAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cWhereClauseWhereClauseParserRuleCall_4_0 = (RuleCall)cWhereClauseAssignment_4.eContents().get(0);
		
		//SelectStatement:
		//    'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=STRING (whereClause=WhereClause)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=STRING (whereClause=WhereClause)?
		public Group getGroup() { return cGroup; }
		
		//'SELECT'
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }
		
		//selectedColumns=SelectedColumns
		public Assignment getSelectedColumnsAssignment_1() { return cSelectedColumnsAssignment_1; }
		
		//SelectedColumns
		public RuleCall getSelectedColumnsSelectedColumnsParserRuleCall_1_0() { return cSelectedColumnsSelectedColumnsParserRuleCall_1_0; }
		
		//'FROM'
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }
		
		//tableName=STRING
		public Assignment getTableNameAssignment_3() { return cTableNameAssignment_3; }
		
		//STRING
		public RuleCall getTableNameSTRINGTerminalRuleCall_3_0() { return cTableNameSTRINGTerminalRuleCall_3_0; }
		
		//(whereClause=WhereClause)?
		public Assignment getWhereClauseAssignment_4() { return cWhereClauseAssignment_4; }
		
		//WhereClause
		public RuleCall getWhereClauseWhereClauseParserRuleCall_4_0() { return cWhereClauseWhereClauseParserRuleCall_4_0; }
	}
	public class SelectedColumnsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.SelectedColumns");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnsIDTerminalRuleCall_0_0 = (RuleCall)cColumnsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cColumnsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cColumnsIDTerminalRuleCall_1_1_0 = (RuleCall)cColumnsAssignment_1_1.eContents().get(0);
		
		//SelectedColumns:
		//    columns+=ID (',' columns+=ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//columns+=ID (',' columns+=ID)*
		public Group getGroup() { return cGroup; }
		
		//columns+=ID
		public Assignment getColumnsAssignment_0() { return cColumnsAssignment_0; }
		
		//ID
		public RuleCall getColumnsIDTerminalRuleCall_0_0() { return cColumnsIDTerminalRuleCall_0_0; }
		
		//(',' columns+=ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//columns+=ID
		public Assignment getColumnsAssignment_1_1() { return cColumnsAssignment_1_1; }
		
		//ID
		public RuleCall getColumnsIDTerminalRuleCall_1_1_0() { return cColumnsIDTerminalRuleCall_1_1_0; }
	}
	public class WhereClauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.WhereClause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cExpressionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cExpressionExpressionParserRuleCall_1_0 = (RuleCall)cExpressionAssignment_1.eContents().get(0);
		
		//WhereClause:
		//    'WHERE' expression=Expression;
		@Override public ParserRule getRule() { return rule; }
		
		//'WHERE' expression=Expression
		public Group getGroup() { return cGroup; }
		
		//'WHERE'
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }
		
		//expression=Expression
		public Assignment getExpressionAssignment_1() { return cExpressionAssignment_1; }
		
		//Expression
		public RuleCall getExpressionExpressionParserRuleCall_1_0() { return cExpressionExpressionParserRuleCall_1_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cORKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightAndExpressionParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Expression:
		//    AndExpression ({OrExpression.left=current} 'OR' right=AndExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//AndExpression ({OrExpression.left=current} 'OR' right=AndExpression)*
		public Group getGroup() { return cGroup; }
		
		//AndExpression
		public RuleCall getAndExpressionParserRuleCall_0() { return cAndExpressionParserRuleCall_0; }
		
		//({OrExpression.left=current} 'OR' right=AndExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{OrExpression.left=current}
		public Action getOrExpressionLeftAction_1_0() { return cOrExpressionLeftAction_1_0; }
		
		//'OR'
		public Keyword getORKeyword_1_1() { return cORKeyword_1_1; }
		
		//right=AndExpression
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//AndExpression
		public RuleCall getRightAndExpressionParserRuleCall_1_2_0() { return cRightAndExpressionParserRuleCall_1_2_0; }
	}
	public class AndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.AndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cComparisonParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndExpressionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cANDKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightComparisonParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//AndExpression:
		//    Comparison ({AndExpression.left=current} 'AND' right=Comparison)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Comparison ({AndExpression.left=current} 'AND' right=Comparison)*
		public Group getGroup() { return cGroup; }
		
		//Comparison
		public RuleCall getComparisonParserRuleCall_0() { return cComparisonParserRuleCall_0; }
		
		//({AndExpression.left=current} 'AND' right=Comparison)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{AndExpression.left=current}
		public Action getAndExpressionLeftAction_1_0() { return cAndExpressionLeftAction_1_0; }
		
		//'AND'
		public Keyword getANDKeyword_1_1() { return cANDKeyword_1_1; }
		
		//right=Comparison
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Comparison
		public RuleCall getRightComparisonParserRuleCall_1_2_0() { return cRightComparisonParserRuleCall_1_2_0; }
	}
	public class ComparisonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Comparison");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cColumnAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cColumnIDTerminalRuleCall_0_0 = (RuleCall)cColumnAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorParserRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueValueParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Comparison:
		//    column=ID operator=Operator value=Value;
		@Override public ParserRule getRule() { return rule; }
		
		//column=ID operator=Operator value=Value
		public Group getGroup() { return cGroup; }
		
		//column=ID
		public Assignment getColumnAssignment_0() { return cColumnAssignment_0; }
		
		//ID
		public RuleCall getColumnIDTerminalRuleCall_0_0() { return cColumnIDTerminalRuleCall_0_0; }
		
		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//Operator
		public RuleCall getOperatorOperatorParserRuleCall_1_0() { return cOperatorOperatorParserRuleCall_1_0; }
		
		//value=Value
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//Value
		public RuleCall getValueValueParserRuleCall_2_0() { return cValueValueParserRuleCall_2_0; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cEqualsSignKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cLessThanSignGreaterThanSignKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		private final Keyword cLessThanSignKeyword_2 = (Keyword)cAlternatives.eContents().get(2);
		private final Keyword cLessThanSignEqualsSignKeyword_3 = (Keyword)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanSignKeyword_4 = (Keyword)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanSignEqualsSignKeyword_5 = (Keyword)cAlternatives.eContents().get(5);
		
		//Operator:
		//    '=' | '<>' | '<' | '<=' | '>' | '>=';
		@Override public ParserRule getRule() { return rule; }
		
		//'=' | '<>' | '<' | '<=' | '>' | '>='
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'='
		public Keyword getEqualsSignKeyword_0() { return cEqualsSignKeyword_0; }
		
		//'<>'
		public Keyword getLessThanSignGreaterThanSignKeyword_1() { return cLessThanSignGreaterThanSignKeyword_1; }
		
		//'<'
		public Keyword getLessThanSignKeyword_2() { return cLessThanSignKeyword_2; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_3() { return cLessThanSignEqualsSignKeyword_3; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_4() { return cGreaterThanSignKeyword_4; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_5() { return cGreaterThanSignEqualsSignKeyword_5; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNumberValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Value:
		//    BooleanValue | NumberValue | StringValue;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanValue | NumberValue | StringValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_0() { return cBooleanValueParserRuleCall_0; }
		
		//NumberValue
		public RuleCall getNumberValueParserRuleCall_1() { return cNumberValueParserRuleCall_1; }
		
		//StringValue
		public RuleCall getStringValueParserRuleCall_2() { return cStringValueParserRuleCall_2; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Alternatives cValueAlternatives_0 = (Alternatives)cValueAssignment.eContents().get(0);
		private final Keyword cValueTrueKeyword_0_0 = (Keyword)cValueAlternatives_0.eContents().get(0);
		private final Keyword cValueFalseKeyword_0_1 = (Keyword)cValueAlternatives_0.eContents().get(1);
		
		//BooleanValue:
		//    value=('true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//value=('true' | 'false')
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//('true' | 'false')
		public Alternatives getValueAlternatives_0() { return cValueAlternatives_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_0_0() { return cValueTrueKeyword_0_0; }
		
		//'false'
		public Keyword getValueFalseKeyword_0_1() { return cValueFalseKeyword_0_1; }
	}
	public class NumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.NumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueINTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//NumberValue:
		//    value=INT;
		@Override public ParserRule getRule() { return rule; }
		
		//value=INT
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_0() { return cValueINTTerminalRuleCall_0; }
	}
	public class StringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.simple_sql.SQL.StringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringValue:
		//    value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	
	
	private final ModelElements pModel;
	private final StatementElements pStatement;
	private final CreateTableStatementElements pCreateTableStatement;
	private final ColumnDefinitionElements pColumnDefinition;
	private final ColumnTypeElements pColumnType;
	private final ConstraintElements pConstraint;
	private final SelectStatementElements pSelectStatement;
	private final SelectedColumnsElements pSelectedColumns;
	private final WhereClauseElements pWhereClause;
	private final ExpressionElements pExpression;
	private final AndExpressionElements pAndExpression;
	private final ComparisonElements pComparison;
	private final OperatorElements pOperator;
	private final ValueElements pValue;
	private final BooleanValueElements pBooleanValue;
	private final NumberValueElements pNumberValue;
	private final StringValueElements pStringValue;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pStatement = new StatementElements();
		this.pCreateTableStatement = new CreateTableStatementElements();
		this.pColumnDefinition = new ColumnDefinitionElements();
		this.pColumnType = new ColumnTypeElements();
		this.pConstraint = new ConstraintElements();
		this.pSelectStatement = new SelectStatementElements();
		this.pSelectedColumns = new SelectedColumnsElements();
		this.pWhereClause = new WhereClauseElements();
		this.pExpression = new ExpressionElements();
		this.pAndExpression = new AndExpressionElements();
		this.pComparison = new ComparisonElements();
		this.pOperator = new OperatorElements();
		this.pValue = new ValueElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pNumberValue = new NumberValueElements();
		this.pStringValue = new StringValueElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.simple_sql.SQL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//    statements+=Statement*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Statement:
	//    CreateTableStatement | SelectStatement;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//CreateTableStatement:
	//    'CREATE' 'TABLE' tableName=STRING '(' columns+=ColumnDefinition* ')';
	public CreateTableStatementElements getCreateTableStatementAccess() {
		return pCreateTableStatement;
	}
	
	public ParserRule getCreateTableStatementRule() {
		return getCreateTableStatementAccess().getRule();
	}
	
	//ColumnDefinition:
	//    columnName=ID columnType=ColumnType (constraints+=Constraint)* ','?;
	public ColumnDefinitionElements getColumnDefinitionAccess() {
		return pColumnDefinition;
	}
	
	public ParserRule getColumnDefinitionRule() {
		return getColumnDefinitionAccess().getRule();
	}
	
	//ColumnType:
	//    {ColumnType} 'INT' | 'VARCHAR' '(' length=INT ')' | {ColumnType} 'BOOLEAN' | {ColumnType} 'TINYINT';
	public ColumnTypeElements getColumnTypeAccess() {
		return pColumnType;
	}
	
	public ParserRule getColumnTypeRule() {
		return getColumnTypeAccess().getRule();
	}
	
	//Constraint:
	//    'NOT' 'NULL' | 'PRIMARY' 'KEY';
	public ConstraintElements getConstraintAccess() {
		return pConstraint;
	}
	
	public ParserRule getConstraintRule() {
		return getConstraintAccess().getRule();
	}
	
	//SelectStatement:
	//    'SELECT' selectedColumns=SelectedColumns 'FROM' tableName=STRING (whereClause=WhereClause)?;
	public SelectStatementElements getSelectStatementAccess() {
		return pSelectStatement;
	}
	
	public ParserRule getSelectStatementRule() {
		return getSelectStatementAccess().getRule();
	}
	
	//SelectedColumns:
	//    columns+=ID (',' columns+=ID)*;
	public SelectedColumnsElements getSelectedColumnsAccess() {
		return pSelectedColumns;
	}
	
	public ParserRule getSelectedColumnsRule() {
		return getSelectedColumnsAccess().getRule();
	}
	
	//WhereClause:
	//    'WHERE' expression=Expression;
	public WhereClauseElements getWhereClauseAccess() {
		return pWhereClause;
	}
	
	public ParserRule getWhereClauseRule() {
		return getWhereClauseAccess().getRule();
	}
	
	//Expression:
	//    AndExpression ({OrExpression.left=current} 'OR' right=AndExpression)*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//AndExpression:
	//    Comparison ({AndExpression.left=current} 'AND' right=Comparison)*;
	public AndExpressionElements getAndExpressionAccess() {
		return pAndExpression;
	}
	
	public ParserRule getAndExpressionRule() {
		return getAndExpressionAccess().getRule();
	}
	
	//Comparison:
	//    column=ID operator=Operator value=Value;
	public ComparisonElements getComparisonAccess() {
		return pComparison;
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}
	
	//Operator:
	//    '=' | '<>' | '<' | '<=' | '>' | '>=';
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Value:
	//    BooleanValue | NumberValue | StringValue;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//BooleanValue:
	//    value=('true' | 'false');
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//NumberValue:
	//    value=INT;
	public NumberValueElements getNumberValueAccess() {
		return pNumberValue;
	}
	
	public ParserRule getNumberValueRule() {
		return getNumberValueAccess().getRule();
	}
	
	//StringValue:
	//    value=STRING;
	public StringValueElements getStringValueAccess() {
		return pStringValue;
	}
	
	public ParserRule getStringValueRule() {
		return getStringValueAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
