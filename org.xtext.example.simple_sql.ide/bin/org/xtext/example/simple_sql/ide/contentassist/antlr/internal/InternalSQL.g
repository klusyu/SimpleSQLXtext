/*
 * generated by Xtext 2.33.0
 */
grammar InternalSQL;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.example.simple_sql.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.example.simple_sql.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.example.simple_sql.services.SQLGrammarAccess;

}
@parser::members {
	private SQLGrammarAccess grammarAccess;

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getStatementsAssignment()); }
		(rule__Model__StatementsAssignment)*
		{ after(grammarAccess.getModelAccess().getStatementsAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStatement
entryRuleStatement
:
{ before(grammarAccess.getStatementRule()); }
	 ruleStatement
{ after(grammarAccess.getStatementRule()); } 
	 EOF 
;

// Rule Statement
ruleStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStatementAccess().getAlternatives()); }
		(rule__Statement__Alternatives)
		{ after(grammarAccess.getStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCreateTableStatement
entryRuleCreateTableStatement
:
{ before(grammarAccess.getCreateTableStatementRule()); }
	 ruleCreateTableStatement
{ after(grammarAccess.getCreateTableStatementRule()); } 
	 EOF 
;

// Rule CreateTableStatement
ruleCreateTableStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCreateTableStatementAccess().getGroup()); }
		(rule__CreateTableStatement__Group__0)
		{ after(grammarAccess.getCreateTableStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnDefinition
entryRuleColumnDefinition
:
{ before(grammarAccess.getColumnDefinitionRule()); }
	 ruleColumnDefinition
{ after(grammarAccess.getColumnDefinitionRule()); } 
	 EOF 
;

// Rule ColumnDefinition
ruleColumnDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnDefinitionAccess().getGroup()); }
		(rule__ColumnDefinition__Group__0)
		{ after(grammarAccess.getColumnDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleColumnType
entryRuleColumnType
:
{ before(grammarAccess.getColumnTypeRule()); }
	 ruleColumnType
{ after(grammarAccess.getColumnTypeRule()); } 
	 EOF 
;

// Rule ColumnType
ruleColumnType 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getColumnTypeAccess().getAlternatives()); }
		(rule__ColumnType__Alternatives)
		{ after(grammarAccess.getColumnTypeAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getAlternatives()); }
		(rule__Constraint__Alternatives)
		{ after(grammarAccess.getConstraintAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectStatement
entryRuleSelectStatement
:
{ before(grammarAccess.getSelectStatementRule()); }
	 ruleSelectStatement
{ after(grammarAccess.getSelectStatementRule()); } 
	 EOF 
;

// Rule SelectStatement
ruleSelectStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectStatementAccess().getGroup()); }
		(rule__SelectStatement__Group__0)
		{ after(grammarAccess.getSelectStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSelectedColumns
entryRuleSelectedColumns
:
{ before(grammarAccess.getSelectedColumnsRule()); }
	 ruleSelectedColumns
{ after(grammarAccess.getSelectedColumnsRule()); } 
	 EOF 
;

// Rule SelectedColumns
ruleSelectedColumns 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getGroup()); }
		(rule__SelectedColumns__Group__0)
		{ after(grammarAccess.getSelectedColumnsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhereClause
entryRuleWhereClause
:
{ before(grammarAccess.getWhereClauseRule()); }
	 ruleWhereClause
{ after(grammarAccess.getWhereClauseRule()); } 
	 EOF 
;

// Rule WhereClause
ruleWhereClause 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhereClauseAccess().getGroup()); }
		(rule__WhereClause__Group__0)
		{ after(grammarAccess.getWhereClauseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAndExpression
entryRuleAndExpression
:
{ before(grammarAccess.getAndExpressionRule()); }
	 ruleAndExpression
{ after(grammarAccess.getAndExpressionRule()); } 
	 EOF 
;

// Rule AndExpression
ruleAndExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAndExpressionAccess().getGroup()); }
		(rule__AndExpression__Group__0)
		{ after(grammarAccess.getAndExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleComparison
entryRuleComparison
:
{ before(grammarAccess.getComparisonRule()); }
	 ruleComparison
{ after(grammarAccess.getComparisonRule()); } 
	 EOF 
;

// Rule Comparison
ruleComparison 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getComparisonAccess().getGroup()); }
		(rule__Comparison__Group__0)
		{ after(grammarAccess.getComparisonAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOperator
entryRuleOperator
:
{ before(grammarAccess.getOperatorRule()); }
	 ruleOperator
{ after(grammarAccess.getOperatorRule()); } 
	 EOF 
;

// Rule Operator
ruleOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
		(rule__Operator__Alternatives)
		{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleValue
entryRuleValue
:
{ before(grammarAccess.getValueRule()); }
	 ruleValue
{ after(grammarAccess.getValueRule()); } 
	 EOF 
;

// Rule Value
ruleValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getValueAccess().getAlternatives()); }
		(rule__Value__Alternatives)
		{ after(grammarAccess.getValueAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue
:
{ before(grammarAccess.getBooleanValueRule()); }
	 ruleBooleanValue
{ after(grammarAccess.getBooleanValueRule()); } 
	 EOF 
;

// Rule BooleanValue
ruleBooleanValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
		(rule__BooleanValue__ValueAssignment)
		{ after(grammarAccess.getBooleanValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberValue
entryRuleNumberValue
:
{ before(grammarAccess.getNumberValueRule()); }
	 ruleNumberValue
{ after(grammarAccess.getNumberValueRule()); } 
	 EOF 
;

// Rule NumberValue
ruleNumberValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueAssignment()); }
		(rule__NumberValue__ValueAssignment)
		{ after(grammarAccess.getNumberValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleStringValue
entryRuleStringValue
:
{ before(grammarAccess.getStringValueRule()); }
	 ruleStringValue
{ after(grammarAccess.getStringValueRule()); } 
	 EOF 
;

// Rule StringValue
ruleStringValue 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getStringValueAccess().getValueAssignment()); }
		(rule__StringValue__ValueAssignment)
		{ after(grammarAccess.getStringValueAccess().getValueAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Statement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStatementAccess().getCreateTableStatementParserRuleCall_0()); }
		ruleCreateTableStatement
		{ after(grammarAccess.getStatementAccess().getCreateTableStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_1()); }
		ruleSelectStatement
		{ after(grammarAccess.getStatementAccess().getSelectStatementParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnTypeAccess().getGroup_0()); }
		(rule__ColumnType__Group_0__0)
		{ after(grammarAccess.getColumnTypeAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getColumnTypeAccess().getGroup_1()); }
		(rule__ColumnType__Group_1__0)
		{ after(grammarAccess.getColumnTypeAccess().getGroup_1()); }
	)
	|
	(
		{ before(grammarAccess.getColumnTypeAccess().getGroup_2()); }
		(rule__ColumnType__Group_2__0)
		{ after(grammarAccess.getColumnTypeAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getColumnTypeAccess().getGroup_3()); }
		(rule__ColumnType__Group_3__0)
		{ after(grammarAccess.getColumnTypeAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup_0()); }
		(rule__Constraint__Group_0__0)
		{ after(grammarAccess.getConstraintAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getConstraintAccess().getGroup_1()); }
		(rule__Constraint__Group_1__0)
		{ after(grammarAccess.getConstraintAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }
		'='
		{ after(grammarAccess.getOperatorAccess().getEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
		'<>'
		{ after(grammarAccess.getOperatorAccess().getLessThanSignGreaterThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignKeyword_2()); }
		'<'
		{ after(grammarAccess.getOperatorAccess().getLessThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
		'>'
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignKeyword_4()); }
	)
	|
	(
		{ before(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }
		'>='
		{ after(grammarAccess.getOperatorAccess().getGreaterThanSignEqualsSignKeyword_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Value__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0()); }
		ruleBooleanValue
		{ after(grammarAccess.getValueAccess().getBooleanValueParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
		ruleNumberValue
		{ after(grammarAccess.getValueAccess().getNumberValueParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getValueAccess().getStringValueParserRuleCall_2()); }
		ruleStringValue
		{ after(grammarAccess.getValueAccess().getStringValueParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAlternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }
		'true'
		{ after(grammarAccess.getBooleanValueAccess().getValueTrueKeyword_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }
		'false'
		{ after(grammarAccess.getBooleanValueAccess().getValueFalseKeyword_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__0__Impl
	rule__CreateTableStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getCREATEKeyword_0()); }
	'CREATE'
	{ after(grammarAccess.getCreateTableStatementAccess().getCREATEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__1__Impl
	rule__CreateTableStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getTABLEKeyword_1()); }
	'TABLE'
	{ after(grammarAccess.getCreateTableStatementAccess().getTABLEKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__2__Impl
	rule__CreateTableStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getTableNameAssignment_2()); }
	(rule__CreateTableStatement__TableNameAssignment_2)
	{ after(grammarAccess.getCreateTableStatementAccess().getTableNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__3__Impl
	rule__CreateTableStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getLeftParenthesisKeyword_3()); }
	'('
	{ after(grammarAccess.getCreateTableStatementAccess().getLeftParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__4__Impl
	rule__CreateTableStatement__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getColumnsAssignment_4()); }
	(rule__CreateTableStatement__ColumnsAssignment_4)*
	{ after(grammarAccess.getCreateTableStatementAccess().getColumnsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__CreateTableStatement__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCreateTableStatementAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getCreateTableStatementAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnDefinition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDefinition__Group__0__Impl
	rule__ColumnDefinition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDefinitionAccess().getColumnNameAssignment_0()); }
	(rule__ColumnDefinition__ColumnNameAssignment_0)
	{ after(grammarAccess.getColumnDefinitionAccess().getColumnNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDefinition__Group__1__Impl
	rule__ColumnDefinition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDefinitionAccess().getColumnTypeAssignment_1()); }
	(rule__ColumnDefinition__ColumnTypeAssignment_1)
	{ after(grammarAccess.getColumnDefinitionAccess().getColumnTypeAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDefinition__Group__2__Impl
	rule__ColumnDefinition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDefinitionAccess().getConstraintsAssignment_2()); }
	(rule__ColumnDefinition__ConstraintsAssignment_2)*
	{ after(grammarAccess.getColumnDefinitionAccess().getConstraintsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnDefinition__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnDefinitionAccess().getCommaKeyword_3()); }
	(',')?
	{ after(grammarAccess.getColumnDefinitionAccess().getCommaKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnType__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_0__0__Impl
	rule__ColumnType__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getColumnTypeAction_0_0()); }
	()
	{ after(grammarAccess.getColumnTypeAccess().getColumnTypeAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getINTKeyword_0_1()); }
	'INT'
	{ after(grammarAccess.getColumnTypeAccess().getINTKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnType__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_1__0__Impl
	rule__ColumnType__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getVARCHARKeyword_1_0()); }
	'VARCHAR'
	{ after(grammarAccess.getColumnTypeAccess().getVARCHARKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_1__1__Impl
	rule__ColumnType__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getLeftParenthesisKeyword_1_1()); }
	'('
	{ after(grammarAccess.getColumnTypeAccess().getLeftParenthesisKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_1__2__Impl
	rule__ColumnType__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getLengthAssignment_1_2()); }
	(rule__ColumnType__LengthAssignment_1_2)
	{ after(grammarAccess.getColumnTypeAccess().getLengthAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getRightParenthesisKeyword_1_3()); }
	')'
	{ after(grammarAccess.getColumnTypeAccess().getRightParenthesisKeyword_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnType__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_2__0__Impl
	rule__ColumnType__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getColumnTypeAction_2_0()); }
	()
	{ after(grammarAccess.getColumnTypeAccess().getColumnTypeAction_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getBOOLEANKeyword_2_1()); }
	'BOOLEAN'
	{ after(grammarAccess.getColumnTypeAccess().getBOOLEANKeyword_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnType__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_3__0__Impl
	rule__ColumnType__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getColumnTypeAction_3_0()); }
	()
	{ after(grammarAccess.getColumnTypeAccess().getColumnTypeAction_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ColumnType__Group_3__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getColumnTypeAccess().getTINYINTKeyword_3_1()); }
	'TINYINT'
	{ after(grammarAccess.getColumnTypeAccess().getTINYINTKeyword_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_0__0__Impl
	rule__Constraint__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNOTKeyword_0_0()); }
	'NOT'
	{ after(grammarAccess.getConstraintAccess().getNOTKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNULLKeyword_0_1()); }
	'NULL'
	{ after(grammarAccess.getConstraintAccess().getNULLKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__0__Impl
	rule__Constraint__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getPRIMARYKeyword_1_0()); }
	'PRIMARY'
	{ after(grammarAccess.getConstraintAccess().getPRIMARYKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getKEYKeyword_1_1()); }
	'KEY'
	{ after(grammarAccess.getConstraintAccess().getKEYKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__0__Impl
	rule__SelectStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSELECTKeyword_0()); }
	'SELECT'
	{ after(grammarAccess.getSelectStatementAccess().getSELECTKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__1__Impl
	rule__SelectStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getSelectedColumnsAssignment_1()); }
	(rule__SelectStatement__SelectedColumnsAssignment_1)
	{ after(grammarAccess.getSelectStatementAccess().getSelectedColumnsAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__2__Impl
	rule__SelectStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getFROMKeyword_2()); }
	'FROM'
	{ after(grammarAccess.getSelectStatementAccess().getFROMKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__3__Impl
	rule__SelectStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getTableNameAssignment_3()); }
	(rule__SelectStatement__TableNameAssignment_3)
	{ after(grammarAccess.getSelectStatementAccess().getTableNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_4()); }
	(rule__SelectStatement__WhereClauseAssignment_4)?
	{ after(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedColumns__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group__0__Impl
	rule__SelectedColumns__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0()); }
	(rule__SelectedColumns__ColumnsAssignment_0)
	{ after(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getGroup_1()); }
	(rule__SelectedColumns__Group_1__0)*
	{ after(grammarAccess.getSelectedColumnsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__SelectedColumns__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group_1__0__Impl
	rule__SelectedColumns__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getSelectedColumnsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__SelectedColumns__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1()); }
	(rule__SelectedColumns__ColumnsAssignment_1_1)
	{ after(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__WhereClause__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__0__Impl
	rule__WhereClause__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
	'WHERE'
	{ after(grammarAccess.getWhereClauseAccess().getWHEREKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__WhereClause__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
	(rule__WhereClause__ExpressionAssignment_1)
	{ after(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0()); }
	ruleAndExpression
	{ after(grammarAccess.getExpressionAccess().getAndExpressionParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOrExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getOrExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getORKeyword_1_1()); }
	'OR'
	{ after(grammarAccess.getExpressionAccess().getORKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__0__Impl
	rule__AndExpression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
	ruleComparison
	{ after(grammarAccess.getAndExpressionAccess().getComparisonParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getGroup_1()); }
	(rule__AndExpression__Group_1__0)*
	{ after(grammarAccess.getAndExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AndExpression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__0__Impl
	rule__AndExpression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAndExpressionAccess().getAndExpressionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__1__Impl
	rule__AndExpression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1()); }
	'AND'
	{ after(grammarAccess.getAndExpressionAccess().getANDKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AndExpression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
	(rule__AndExpression__RightAssignment_1_2)
	{ after(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Comparison__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__0__Impl
	rule__Comparison__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getColumnAssignment_0()); }
	(rule__Comparison__ColumnAssignment_0)
	{ after(grammarAccess.getComparisonAccess().getColumnAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__1__Impl
	rule__Comparison__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
	(rule__Comparison__OperatorAssignment_1)
	{ after(grammarAccess.getComparisonAccess().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Comparison__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getComparisonAccess().getValueAssignment_2()); }
	(rule__Comparison__ValueAssignment_2)
	{ after(grammarAccess.getComparisonAccess().getValueAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__StatementsAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
		ruleStatement
		{ after(grammarAccess.getModelAccess().getStatementsStatementParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__TableNameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateTableStatementAccess().getTableNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getCreateTableStatementAccess().getTableNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__CreateTableStatement__ColumnsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCreateTableStatementAccess().getColumnsColumnDefinitionParserRuleCall_4_0()); }
		ruleColumnDefinition
		{ after(grammarAccess.getCreateTableStatementAccess().getColumnsColumnDefinitionParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__ColumnNameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDefinitionAccess().getColumnNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getColumnDefinitionAccess().getColumnNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__ColumnTypeAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDefinitionAccess().getColumnTypeColumnTypeParserRuleCall_1_0()); }
		ruleColumnType
		{ after(grammarAccess.getColumnDefinitionAccess().getColumnTypeColumnTypeParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnDefinition__ConstraintsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnDefinitionAccess().getConstraintsConstraintParserRuleCall_2_0()); }
		ruleConstraint
		{ after(grammarAccess.getColumnDefinitionAccess().getConstraintsConstraintParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnType__LengthAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getColumnTypeAccess().getLengthINTTerminalRuleCall_1_2_0()); }
		RULE_INT
		{ after(grammarAccess.getColumnTypeAccess().getLengthINTTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__SelectedColumnsAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0()); }
		ruleSelectedColumns
		{ after(grammarAccess.getSelectStatementAccess().getSelectedColumnsSelectedColumnsParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__TableNameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectStatementAccess().getTableNameSTRINGTerminalRuleCall_3_0()); }
		RULE_STRING
		{ after(grammarAccess.getSelectStatementAccess().getTableNameSTRINGTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectStatement__WhereClauseAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0()); }
		ruleWhereClause
		{ after(grammarAccess.getSelectStatementAccess().getWhereClauseWhereClauseParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__ColumnsAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__SelectedColumns__ColumnsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0()); }
		RULE_ID
		{ after(grammarAccess.getSelectedColumnsAccess().getColumnsIDTerminalRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereClause__ExpressionAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getWhereClauseAccess().getExpressionExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
		ruleAndExpression
		{ after(grammarAccess.getExpressionAccess().getRightAndExpressionParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AndExpression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_2_0()); }
		ruleComparison
		{ after(grammarAccess.getAndExpressionAccess().getRightComparisonParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__ColumnAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getColumnIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getComparisonAccess().getColumnIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getOperatorOperatorParserRuleCall_1_0()); }
		ruleOperator
		{ after(grammarAccess.getComparisonAccess().getOperatorOperatorParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Comparison__ValueAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getComparisonAccess().getValueValueParserRuleCall_2_0()); }
		ruleValue
		{ after(grammarAccess.getComparisonAccess().getValueValueParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
		(rule__BooleanValue__ValueAlternatives_0)
		{ after(grammarAccess.getBooleanValueAccess().getValueAlternatives_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getNumberValueAccess().getValueINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__StringValue__ValueAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getStringValueAccess().getValueSTRINGTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
