/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.simple_sql.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.example.simple_sql.ide.contentassist.antlr.internal.InternalSQLParser;
import org.xtext.example.simple_sql.services.SQLGrammarAccess;

public class SQLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SQLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SQLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getColumnTypeAccess().getAlternatives(), "rule__ColumnType__Alternatives");
			builder.put(grammarAccess.getConstraintAccess().getAlternatives(), "rule__Constraint__Alternatives");
			builder.put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAlternatives_0(), "rule__BooleanValue__ValueAlternatives_0");
			builder.put(grammarAccess.getCreateTableStatementAccess().getGroup(), "rule__CreateTableStatement__Group__0");
			builder.put(grammarAccess.getColumnDefinitionAccess().getGroup(), "rule__ColumnDefinition__Group__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_0(), "rule__ColumnType__Group_0__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_1(), "rule__ColumnType__Group_1__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_2(), "rule__ColumnType__Group_2__0");
			builder.put(grammarAccess.getColumnTypeAccess().getGroup_3(), "rule__ColumnType__Group_3__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup_0(), "rule__Constraint__Group_0__0");
			builder.put(grammarAccess.getConstraintAccess().getGroup_1(), "rule__Constraint__Group_1__0");
			builder.put(grammarAccess.getSelectStatementAccess().getGroup(), "rule__SelectStatement__Group__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup(), "rule__SelectedColumns__Group__0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getGroup_1(), "rule__SelectedColumns__Group_1__0");
			builder.put(grammarAccess.getWhereClauseAccess().getGroup(), "rule__WhereClause__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
			builder.put(grammarAccess.getExpressionAccess().getGroup_1(), "rule__Expression__Group_1__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup(), "rule__AndExpression__Group__0");
			builder.put(grammarAccess.getAndExpressionAccess().getGroup_1(), "rule__AndExpression__Group_1__0");
			builder.put(grammarAccess.getComparisonAccess().getGroup(), "rule__Comparison__Group__0");
			builder.put(grammarAccess.getModelAccess().getStatementsAssignment(), "rule__Model__StatementsAssignment");
			builder.put(grammarAccess.getCreateTableStatementAccess().getTableNameAssignment_2(), "rule__CreateTableStatement__TableNameAssignment_2");
			builder.put(grammarAccess.getCreateTableStatementAccess().getColumnsAssignment_4(), "rule__CreateTableStatement__ColumnsAssignment_4");
			builder.put(grammarAccess.getColumnDefinitionAccess().getColumnNameAssignment_0(), "rule__ColumnDefinition__ColumnNameAssignment_0");
			builder.put(grammarAccess.getColumnDefinitionAccess().getColumnTypeAssignment_1(), "rule__ColumnDefinition__ColumnTypeAssignment_1");
			builder.put(grammarAccess.getColumnDefinitionAccess().getConstraintsAssignment_2(), "rule__ColumnDefinition__ConstraintsAssignment_2");
			builder.put(grammarAccess.getColumnTypeAccess().getLengthAssignment_1_2(), "rule__ColumnType__LengthAssignment_1_2");
			builder.put(grammarAccess.getSelectStatementAccess().getSelectedColumnsAssignment_1(), "rule__SelectStatement__SelectedColumnsAssignment_1");
			builder.put(grammarAccess.getSelectStatementAccess().getTableNameAssignment_3(), "rule__SelectStatement__TableNameAssignment_3");
			builder.put(grammarAccess.getSelectStatementAccess().getWhereClauseAssignment_4(), "rule__SelectStatement__WhereClauseAssignment_4");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_0(), "rule__SelectedColumns__ColumnsAssignment_0");
			builder.put(grammarAccess.getSelectedColumnsAccess().getColumnsAssignment_1_1(), "rule__SelectedColumns__ColumnsAssignment_1_1");
			builder.put(grammarAccess.getWhereClauseAccess().getExpressionAssignment_1(), "rule__WhereClause__ExpressionAssignment_1");
			builder.put(grammarAccess.getExpressionAccess().getRightAssignment_1_2(), "rule__Expression__RightAssignment_1_2");
			builder.put(grammarAccess.getAndExpressionAccess().getRightAssignment_1_2(), "rule__AndExpression__RightAssignment_1_2");
			builder.put(grammarAccess.getComparisonAccess().getColumnAssignment_0(), "rule__Comparison__ColumnAssignment_0");
			builder.put(grammarAccess.getComparisonAccess().getOperatorAssignment_1(), "rule__Comparison__OperatorAssignment_1");
			builder.put(grammarAccess.getComparisonAccess().getValueAssignment_2(), "rule__Comparison__ValueAssignment_2");
			builder.put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
			builder.put(grammarAccess.getNumberValueAccess().getValueAssignment(), "rule__NumberValue__ValueAssignment");
			builder.put(grammarAccess.getStringValueAccess().getValueAssignment(), "rule__StringValue__ValueAssignment");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SQLGrammarAccess grammarAccess;

	@Override
	protected InternalSQLParser createParser() {
		InternalSQLParser result = new InternalSQLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SQLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SQLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
