/*
 * generated by Xtext 2.33.0
 */
package org.xtext.example.simple_sql.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.extensions.InjectionExtension
import org.eclipse.xtext.testing.util.ParseHelper
import org.junit.jupiter.api.Assertions
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.^extension.ExtendWith
import org.xtext.example.simple_sql.sQL.Model
import org.eclipse.emf.common.util.URI
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl

@ExtendWith(InjectionExtension)
@InjectWith(SQLInjectorProvider)
class SQLParsingTest {
	@Inject
	ParseHelper<Model> parseHelper
	
	@Test
	def void loadModel() {
		val result = parseHelper.parse('''
			CREATE TABLE "tbl_patient" (
				patientid INT NOT NULL PRIMARY KEY,
				name VARCHAR(40) NOT NULL,
				type BOOLEAN NOT NULL,
				stage TINYINT NOT NULL
			) 

			SELECT name
			FROM "tbl_patient"
			WHERE stage = 4 AND type = false
		''')
		Assertions.assertNotNull(result)
		val errors = result.eResource.errors
		Assertions.assertTrue(errors.isEmpty, '''Unexpected errors: «errors.join(", ")»''')

		// Serialize the result to an XMI file
		val resourceSet = new ResourceSetImpl()
        resourceSet.resourceFactoryRegistry.extensionToFactoryMap.put("xmi", new XMIResourceFactoryImpl())
        val resource = resourceSet.createResource(URI.createFileURI("D:/eclipse-modeling-2023-09-R-win32-x86_64/xtext_workspace/R2RMLXtext/sql_out.xmi"))
        resource.contents.add(result)
        resource.save(null)
	}
}
