/**
 * generated by Xtext 2.33.0
 */
package org.xtext.example.simple_sql.tests;

import com.google.inject.Inject;
import java.util.Map;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.extensions.InjectionExtension;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.xtext.example.simple_sql.sQL.Model;

@ExtendWith(InjectionExtension.class)
@InjectWith(SQLInjectorProvider.class)
@SuppressWarnings("all")
public class SQLParsingTest {
  @Inject
  private ParseHelper<Model> parseHelper;

  @Test
  public void loadModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("CREATE TABLE \"tbl_patient\" (");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("patientid INT NOT NULL PRIMARY KEY,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("name VARCHAR(40) NOT NULL,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("type BOOLEAN NOT NULL,");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("stage TINYINT NOT NULL");
      _builder.newLine();
      _builder.append(") ");
      _builder.newLine();
      _builder.newLine();
      _builder.append("SELECT name");
      _builder.newLine();
      _builder.append("FROM \"tbl_patient\"");
      _builder.newLine();
      _builder.append("WHERE stage = 4 AND type = false");
      _builder.newLine();
      final Model result = this.parseHelper.parse(_builder);
      Assertions.assertNotNull(result);
      final EList<Resource.Diagnostic> errors = result.eResource().getErrors();
      boolean _isEmpty = errors.isEmpty();
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("Unexpected errors: ");
      String _join = IterableExtensions.join(errors, ", ");
      _builder_1.append(_join);
      Assertions.assertTrue(_isEmpty, _builder_1.toString());
      final ResourceSetImpl resourceSet = new ResourceSetImpl();
      Map<String, Object> _extensionToFactoryMap = resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap();
      XMIResourceFactoryImpl _xMIResourceFactoryImpl = new XMIResourceFactoryImpl();
      _extensionToFactoryMap.put("xmi", _xMIResourceFactoryImpl);
      final Resource resource = resourceSet.createResource(URI.createFileURI("D:/eclipse-modeling-2023-09-R-win32-x86_64/xtext_workspace/R2RMLXtext/sql_out.xmi"));
      resource.getContents().add(result);
      resource.save(null);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
